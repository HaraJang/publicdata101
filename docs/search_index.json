[["index.html", "공공데이터 분석 101 챕터 1 모두를 위한 공공데이터 1.1 서론 1.2 이 책의 목적지 1.3 공공데이터란 무엇일까? 1.4 공공데이터를 분석 하는 이유 1.5 공공데이터 활용사례 1.6 무엇을 배우게 될까? 1.7 R을 사용하는 이유 1.8 Statgarten 생태계", " 공공데이터 분석 101 Project Statgarten 2023-06-02 챕터 1 모두를 위한 공공데이터 1.1 서론 우리는 빅데이터와 인공지능의 시대를 살고 있습니다. 인류는 기술의 발전과 함께 수많은 데이터를 수집하고 보유하게 되었습니다. 이러한 데이터는 공공부문에서도 예외는 아닙니다. 정부 기관, 공공기관 및 비영리 단체는 국민의 생활에 영향을 미치는 다양한 분야에서 데이터를 수집하고 보유하고 있습니다. 그러나 그저 쌓여 있기만 한 데이터는 그 자체로는 가치가 없습니다. 죽어있는 데이터를 실제 세상에서 살아 움직이는 데이터로 만드는 일이 필요합니다. 하지만 공공데이터 분석은 그 자체로 쉬운 작업은 아닙니다. 데이터의 복잡성, 다양성, 크기 등이 도전 요인이 될 수 있습니다. 또한, 데이터의 개인정보 보호와 관련된 윤리적인 문제도 고려되어야 합니다. 따라서, 이 분야에서 활동하고자 하는 사람들은 데이터 분석 기술과 도구에 대한 이해뿐만 아니라 윤리적인 측면과 법적인 요구 사항에 대한 이해도 필요합니다. 본 교재에서는 공공데이터 분석에 대한 입문 지식을 제공하고, 분석을 위해 필요한 핵심 개념, 기술, 도구 등을 살펴볼 것입니다. 또한 공공데이터를 통한 의사결정과 문제해결에 대한 이해를 높이고자 합니다. 1.2 이 책의 목적지 시작하기에 앞서 이 책의 목적을 마음에 새기길 부탁드립니다. 그것은 바로 “데이터 분석은 종착지는 최선의 의사결정” 이라는 것 입니다. 물론 데이터를 분석하며 세상의 비밀을 하나씩 찾아가는 행위 자체에서 오는 순수한 즐거움도 있고 가설을 확인하려는 목적도 있겠지만, 데이터는 결국 좋은 의사결정이라는 열매를 맺었을 때 가장 빛이 납니다. 작게는 오후에 비가 올거라는 예보 데이터를 기반으로 오늘 아침 우산을 챙겨나오는 것이나 주식 데이터를 보며 투자할 종목을 결정하는 것부터 국가의 중요한 정책 결정까지, 데이터는 불확실한 상황에서도 결정할 수 있는 용기를 줍니다. 하지만 생각보다 많은 사람들이 데이터에 압도되다 결국 본질을 잃곤 합니다. 달을 보라고 손가락을 들었더니 달은 보지 않고 손가락만 쳐다보고 있기도 합니다. 그럴수록 우리는 이 데이터 여정에서 길을 잃지 않기 위해 언제나 종착점을 주시하고 있어야합니다. 이 책이 결국 향하고자 하는 종착점의 이름은 “데이터에 기반한 좋은 의사결정”입니다. Done is better than perfect – Sheryl Sandberg 이 책의 특징은 매우 얕은 지식입니다. 쓸모 있더라도 어려운 것들을 과감히 들어내려 노력했습니다. 그러니 가벼운 마음으로 시작하셔도 됩니다. 데이터가 소수의 전문가 손에 있을 때에 권력이 되지만, 보다 많은 사람들이 데이터로 생각하고 대화하고 결정하는 데 조금이나마 도움이 되길 바라며 이 책을 씁니다. 코드를 하나하나 따라 적으면 제일 좋겠지만 그저 ‘이런 코드를 넣으면 이런 결과가 나오는구나’ 정도만 생각하면서 읽어도 충분합니다. 완벽하게 하려 우물쭈물 하기 보다는 일단 여기까지 읽었으니 일단 시작해 보는 건 어떨까요? 1.3 공공데이터란 무엇일까? 공공기관은 누구든지 공공데이터를 편리하게 이용할 수 있도록 노력하여야 하며, 이용권의 보편적 확대를 위하여 필요한 조치를 취하여야 한다. – 공공데이터의 제공 및 이용 활성화에 관한 법률 제3조 공공데이터란 정부, 지방자치단체, 공공기관 등이 보유 및 공개하고 있는 데이터를 말합니다. 이는 국민의 세금으로 만들어진 데이터이기 때문에 국민 누구나에게 공개되며 자유롭게 이용할 수 있습니다. 이런 공공데이터는 정부의 투명성과 효율성을 높이는 데에도 도움이 됩니다. 이처럼 정부가 공공데이터를 공개함으로써 국민의 알 권리를 보장하고, 국민의 참여를 유도할 수 있습니다. 또한, 공공데이터를 공개함으로써 정부의 정책 수립과 집행을 투명하게 할 수 있습니다. 공공데이터는 정부와 국민이 함께 발전하는 데 중요한 역할을 합니다. 정부는 공공데이터를 공개함으로써 국민과 소통하고, 국민의 삶의 질을 향상시킬 수 있습니다. 또한, 국민은 공공데이터를 활용함으로써 정부의 정책 수립에 참여하고, 더 나은 사회를 만들 수 있습니다. 1.4 공공데이터를 분석 하는 이유 무엇보다 데이터 비즈니스 생태계에 마중물이 될 수 있습니다. 데이터 비즈니스에서 가장 어려운 점 중에 하나는 양질의 데이터 확보입니다. 데이터 확보하기 위해서는 기본적으로 인력이나 센서같은 장비가 필요합니다. 그리고 인력과 장비에는 많은 비용이 듭니다. 데이터를 정제하고, 인사이트를 찾아내고 문제를 해결하는건 데이터가 확보 이후에나 가능한 일들입니다. 하지만 우리는 대한민국 국민으로 태어났다는 이유만으로 정부나 공공기관이 인력과 자원을 들여 구축한 이 공공데이터를 아무런 비용 없이 사용할 수 있습니다. 공공데이터포털에 접속해보면 2023년 5월 기준으로 현재 1,016개 기관에서 58,398건의 파일데이터, 10,884건의 API 및 9,350건의 표준데이터를 제공하고 있습니다. (물론 엉망진창인 데이터도 종종 존재하지만) 대부분의 공공데이터는 정확하고 신뢰할 수 있습니다. 1.5 공공데이터 활용사례 1.6 무엇을 배우게 될까? 1.7 R을 사용하는 이유 1.8 Statgarten 생태계 "],["data.html", "챕터 2 공공데이터 이해 2.1 공공데이터 확보하기 2.2 파일데이터와 API 2.3 정형데이터와 비정형데이터", " 챕터 2 공공데이터 이해 2.1 공공데이터 확보하기 2.1.1 공공데이터 포탈 2.1.2 통계청 2.1.3 AI Hub 2.2 파일데이터와 API 2.2.1 파일데이터 2.2.2 Application Program Interface (API) 2.3 정형데이터와 비정형데이터 2.3.1 정형데이터와 데이터프레임 2.3.2 비정형데이터 "],["r-에센셜.html", "챕터 3 R 에센셜 3.1 R과 R Studio 설치 3.2 Hello World! 3.3 예쁜 테마는 일할 맛 나게 해주지 3.4 당신의 고민은 이미 누군가의 고민이었다 3.5 계산기로 사용해보기 3.6 이름을 붙여주자(객체할당) 3.7 컴퓨터에게 “1”은 1이 아니야(문자와 숫자) 3.8 함수와 패키지", " 챕터 3 R 에센셜 3.1 R과 R Studio 설치 먼저 R과 R Studio가 필요하다. R은 프로그래밍 언어 자체고, R Studio는 여러분들의 R 프로그래밍을 조금 더 쉽게 도와줄 친구라고 생각해보자. R Studio나 VS Code와 같이 코딩을 도와주는 친구들을 IDE라고 하는데, 이는 “통합 개발 환경” (Integrated Development Environment)의 약어로 소프트웨어 개발을 위한 툴 또는 프로그램을 이야기한다. 이를 통해 개발자는 소스 코드를 작성, 편집, 디버깅, 테스트 및 배포하는 데 많은 도움을 받을 수 있다. 일단 묻지도 따지지도 말고 일단 Posit 홈페이지에 접속하자. 사용하는 OS에 맞춰 R 버전은 4.0이상, R Studio는 대충 최신 버전으로 설치하면 된다. 3.2 Hello World! R Studio를 실행해보자. 프로그래밍이 처음인 사람이라면 아주 낯선 화면을 마주하게 될 것이다. 묻지도 따지지도 말고 일단 Console이라고 적인 박스에서 꿈뻑거리고 있는 그곳에 아래와 같이 입력하고 경쾌히 엔터키를 눌러보자. print(&quot;Hello World!&quot;) ## [1] &quot;Hello World!&quot; 축하한다! 당신은 세상 모든 프로그래머들의 국룰과 함께 역사적인 첫발을 내딛었다. 부디 새로운 세상(World)에 들어온 이 순간을 잘 기억하시라. R Studio의 인터페이스는 단순하다. Console에 뭔가를 쓰고 입력하기만 하면 된다. 우리는 이것을 ’명령’이라고 부른다. 컴퓨터는 ’명령’한대로 뭔가를 하기 시작할 것이다. 그리고 그 여튼 뭔가 보여준다. 제대로 실행되던지 아니면 오류 메시지를 보여주던지. 만약 미완성된 명령을 입력하면 프롬프트에 +가 표시되는데, 이는 나머지 부분을 더 입력하기를 기다리고 있다는 의미다. 명령을 마저 입력하거나 Esc를 눌러 취소하면 된다. 3.3 예쁜 테마는 일할 맛 나게 해주지 다음으로 해야 할 일은 테마를 바꾸는 것이다. Options &gt; Appearance에서는 R Studio의 테마, 폰트, 폰트사이즈 모두 마음대로 바꿀 수 있다. 이건 마치 공부하기 전 책상정리부터 하는 학생의 마음같은 것이다. 내가 공부할 수 있는 가장 기분좋은 상태를 만들어 보자. 마치 국방부 서버를 침투하는 대단한 해커가 된 것 같은 기분을 내보는 것이 도움이 된다. 3.4 당신의 고민은 이미 누군가의 고민이었다 3.4.1 에러 메시지를 대하는 자세 최고급 개발자조차 에러 메시지는 피할 수 없다. 에러 메시지를 무서워하지 말자. 잘 읽어보면 그 안에 답이 있다. 필자의 경우 에러 메시지를 맞닥뜨리는 이유의 80%는 ‘오탈자’ 때문이다. 그래도 모르겠다면 구글에 에러 메시지를 복붙해 해보자. 당신의 고민은 이미 누군가의 고민이었다. ‘How to ~’와’~ in R’을 적절히 섞어서 검색하다 보면 누군가의 해결방법을 찾을 수 있을 것이다. 물론 고수의 입장에서 본다면 복붙한 코드는 근본적인 해결이 아닌 미봉책에 그치는 경우도 많겠지만 지금 단계에서 그것은 중요하지 않다. 일단 과정 가운데 꾸준히 배우다 보면 결국 근본적인 해결책도 만나게 될 것이다. 영어 문서를 무서워하지 말자. 대부분의 고급 정보는 영어로 제공되곤 한다. 영어를 두려워하는 우리를 위해 구글 번역기, DeepL, 네이버 파파고가 존재하지 않는가? 구글 번역기의 크롬 익스텐션이 보다 빠른 번역을 도와줄 것이다. 외국인이나 한국인이나 맞닥드리는 문제는 근본적으로 크게 다르지 않다. 다만 한국어보다 영어를 쓰는 사람이 많기 때문에 영어로된 질문과 답변에 대한 문서가 훨씬 많을 뿐이다. 3.5 계산기로 사용해보기 R은 계산기로 사용할 수 있다. 1 + 1를 입력하고 엔터키를 눌러보자. 1 + 1 ## [1] 2 R은 사칙연산을 포함한 다양한 연산을 할 수 있다. 원하는 숫자들을 더하고(+) 빼고(-) 곱하고(*) 나눠보자(/). R은 아주 작은수 부터 큰수까지 순식간에 계산해준다. 2 + 2 ## [1] 4 2 - 2 ## [1] 0 2 * 2 ## [1] 4 2 / 2 ## [1] 1 3.6 이름을 붙여주자(객체할당) 내가 그의 이름을 불러주기 전에는 그는 다만 하나의 몸짓에 지나지 않았다. 내가 그의 이름을 불러 주었을 때, 그는 나에게로 와서 꽃이 되었다. – 꽃(김춘수) 앞에서 배운 것처럼 R에게 명령을 내려보았다. 하지만 이것들은 아직 컴퓨터 어디에도 저장되지 않았다. 이미 다 지나간 일이라 다시 사용할 수 없으므로 만약 이것들을 계속해서 사용하고 싶다면 어딘가에 어떠한 형태로든 저장해 놓아야 한다. 이제 객체(object)가 필요할 시간이다. two &lt;- 2 five &lt;- 5 이제 컴퓨터의 메모리 어딘가에 객체가 저장되었다. 객체는 &lt;-를 사용해서 할당할 수 있다(대신 =를 사용할 수도 있지만 사용하지 않기로 하자). 할당된 객체들에 대한 정보는 R Studio의 Environment 탭에서 찾아볼 수 있다. two + 8 ## [1] 10 five * 100 ## [1] 500 two / five ## [1] 0.4 이미 만들어진 객체 이름이라도 덮어 쓸 수 있다. 같은 객체 이름을 두번 사용하지 않도록 조심하자. a &lt;- 100 a ## [1] 100 a &lt;- 9999 a ## [1] 9999 객체명을 할당할 때는 반드시 아래 규칙을 지켜야 한다. 만약 이 규칙을 지키지 않고 아래와 같이 하면 에러가 발생할 것이다. 문자로 시작해야 한다(= 숫자로 시작할 수 없다). 문자, 숫자, _, . 만 포함해야 한다. 123 &lt;- 10 animal!! &lt;- &quot;cow&quot; ## Error: &lt;text&gt;:2:7: unexpected &#39;!&#39; ## 1: 123 &lt;- 10 ## 2: animal! ## ^ 또한 R은 대소문자를 구분한다. Year과 year은 다르다. Year &lt;- 365 year ## Error in eval(expr, envir, enclos): object &#39;year&#39; not found There are only two hard things in Computer Science: cache invalidation and naming things. –Phil Karlton 객체 할당에서 가장 어려운 것은 객체의 이름을 정하는 것이다. 객체명을 정하는 방법과 기준은 개발자 간에 다소 주관적일 수 있으나 일반적인 가이드라인은 다음과 같다. 조금 더 자세한 내용이 알고 싶다면 tidyverse style guide를 참조하자. 명확하고 의미 전달력이 있는 이름 사용: 변수명은 해당 변수의 의도나 기능을 명확하게 전달해야 한다. 다른 사람이 코드를 읽거나 유지보수할 때 이해하기 쉬워야 하기 때문에 의미 있는 단어나 약어를 사용하고, 변수가 나타내는 데이터의 성격이나 용도를 잘 나타내도록 한다. 일반적으로 변수 이름은 명사가, 함수 이름은 동사가 좋다(함수가 무엇인지 아직 몰라도 된다). 카멜 케이스 또는 스네이크 케이스 사용: 변수명을 작성하는 데에는 주로 카멜 케이스(camel case) 또는 스네이크 케이스(snake case)를 사용한다. 카멜 케이스는 첫 번째 단어를 제외한 각 단어의 첫 글자를 대문자로 작성하고, 단어들을 연결하여 작성하는 방식으로 예를 들면 “myVariableName”과 같다. 스네이크 케이스는 모든 단어를 소문자로 작성하고, 단어들을 밑줄로 연결하는 방식으로 예를 들면 “my_variable_name”과 같다. 어떤 케이스를 사용하든지 일관성을 유지하는 것이 중요하다(필자는 스네이크 케이스를 선호한다). 너무 짧은 변수명 피하기: 충분히 명확하지만 지나치게 짧게 작성하는 것은 가독성을 저해할 수 있다. 변수의 용도와 의미를 잘 반영하면서도 충분히 길이가 있는 이름을 선택하는 것이 좋다. R Studio를 포함한 대부분의 IDE들에서는 할당된 객체에 대한 자동완성 기능을 제공한다. 일관성 유지: 프로젝트 전체에서 일관된 변수명 규칙을 사용하는 것이 좋다. 같은 종류의 변수는 같은 규칙에 따라 명명되어야 하며, 다른 개발자들과의 협업 시에도 일관성을 유지할 수 있다. 발음하기 쉬운 변수명 쓰기: 혼자 일하지 않는 경우도 많다. Worcestershire같은 변수명을 쓰다간 동료에게 맞는 불상사가 생길 수도 있다. 그리고 생각보다 한글 변수명도 잘 읽는다. 물론 한영전환이 불편할 수도 있고 만약 외국인들과 일한다면 소통의 어려움이 있겠지만, 개인적인 프로젝트라면 보다 풍부한 변수명을 쓸 수도 있다. 무엇보다 특정 도메인에 특화된 프로그래밍을 할 때, 한글 변수명을 사용하면 도메인 용어와의 일치도를 높일 수 있다. 한국어 자연어 처리와 같이 한글을 다루는 분야에서 변수명과 관련 용어들 간의 일관성을 유지하기 쉽다. 아름다운우리한글 &lt;- 99.9 아름다운우리한글 ## [1] 99.9 3.7 컴퓨터에게 “1”은 1이 아니야(문자와 숫자) R은 사람이 콕 찝어 알려주기 전까지는 숫자(number)와 문자(character)를 온전히 구분하지 못한다. 아래 두 사칙연산 결과를 비교해 보자. 5 + 5 ## [1] 10 &quot;5&quot; + &quot;5&quot; ## Error in &quot;5&quot; + &quot;5&quot;: non-numeric argument to binary operator 5 + 5는 정확하게 계산값을 뱉어내지만 \"5\" + \"5\"는 non-numeric argument라 계산할 수 없다는 에러 메시지를 뱉는다. 이는 R에서 5는 \"5\"와 다르기 때문이다. 숫자는 더하거나 뺄 수 있지만, 문자는 불가능하다(우리가 철수에서 영희를 빼지 못하는 것처럼). R은 쌍따옴표(\")로 감싸진 것들은 문자라고 인식하기 때문에 5 + \"5\"는 계산이 불가능하다. 반드시 숫자는 숫자를 다루는 방식으로, 문자는 문자를 다루는 방식으로 다뤄져야 한다. 자료의 속성을 가장 쉽게 확인해보는 방법은 str() 함수를 사용하는 것이다 str(5) ## num 5 str(&quot;5&quot;) ## chr &quot;5&quot; num은 numeric (숫자)을 의미하고 chr은 character (문자)를 의미한다. 명심하자. 우리는 오 더하기 오와 5 + 5를 보며 같은 결과를 도출하지만 R은 개떡같이 말해도 찰떡같이 알아먹을 줄 모른다. chatGPT는 알아 먹던데.. 3.8 함수와 패키지 3.8.1 함수란? 3.8.2 함수들의 꾸러미, 패키지 3.8.3 주요 패키지 설치 install.packages(&quot;tidyverse&quot;) install.packages(&quot;remotes&quot;) remotes::install_github(&quot;statgarten/datatoys&quot;) "],["데이터-주무르기.html", "챕터 4 데이터 주무르기 4.1 datatoys 패키지 소개 4.2 데이터프레임 이해 4.3 음주운전 데이터 주무르기 4.4 데이터라는 것이 폭발한다. 합쳤을 때. 4.5 분석하기 좋은 데이터 형태는?", " 챕터 4 데이터 주무르기 4.1 datatoys 패키지 소개 Play gives children a chance to practice what they are learning – Fred Rogers 4.2 데이터프레임 이해 4.3 음주운전 데이터 주무르기 4.3.1 select() 4.3.2 arrange() 4.3.3 filter() 4.3.4 mutate() 4.3.5 count() 4.3.6 group_by() &amp; summarise() 4.4 데이터라는 것이 폭발한다. 합쳤을 때. 4.4.1 left_join() 4.5 분석하기 좋은 데이터 형태는? 4.5.1 pivot_wider() 4.5.2 pivot_longer() "],["시각화-기초.html", "챕터 5 시각화 기초 5.1 ggplot2 소개 5.2 테이블 시각화(reactable)", " 챕터 5 시각화 기초 데이터 시각화는 데이터를 시각적으로 표현하여 이를 이해하고 전달하는 데에 사용된다. 숫자로만 이뤄진 복잡한 데이터를 직관적이고 효과적으로 분석할 수 있으며, 트렌드, 패턴, 상관 관계 등을 시각적으로 파악할 수 있다. 이런 시각화는 데이터를 보다 직관적으로 이해할 수 있도록 하여 데이터를 통한 의사소통을 원활하게 할 수 있다. 시각화는 결국 ‘효과적인 정보 전달’이 목적인데 그러기 위해서는 사람의 인지방식에 대한 이해 또한 필요하다. 한마디로 데이터 시각화란 데이터에서 찾은 인사이트를 사람이 쉽게 인지할 수 있게 표현하는 방법이다. 여기 앤스컴 콰르탯이라는 데이터가 존재한다(datasets 패키지에 내장되어 있다). 영국의 통계학자인 Frank Anscombe이 만든 데이터셋들로 X1~X4, Y1~Y4까지 데이터가 존재하며 각각 숫자에 맞는 X와 Y값은 매칭되는 총 4개의 그룹에 각각 11개의 관측값이 존재하는 데이터다. knitr::kable(anscombe) x1 x2 x3 x4 y1 y2 y3 y4 10 10 10 8 8.04 9.14 7.46 6.58 8 8 8 8 6.95 8.14 6.77 5.76 13 13 13 8 7.58 8.74 12.74 7.71 9 9 9 8 8.81 8.77 7.11 8.84 11 11 11 8 8.33 9.26 7.81 8.47 14 14 14 8 9.96 8.10 8.84 7.04 6 6 6 8 7.24 6.13 6.08 5.25 4 4 4 19 4.26 3.10 5.39 12.50 12 12 12 8 10.84 9.13 8.15 5.56 7 7 7 8 4.82 7.26 6.42 7.91 5 5 5 8 5.68 4.74 5.73 6.89 나열된 숫자만을 읽는 것은 매우 피곤한일인지라, 먼저 데이터의 평균과 분산을 한번 계산해보자. 코드의 해석은 생각하지 말고 결과값에 집중해보자. # 평균 계산 lapply(anscombe, mean) ## $x1 ## [1] 9 ## ## $x2 ## [1] 9 ## ## $x3 ## [1] 9 ## ## $x4 ## [1] 9 ## ## $y1 ## [1] 7.500909 ## ## $y2 ## [1] 7.500909 ## ## $y3 ## [1] 7.5 ## ## $y4 ## [1] 7.500909 # 분산 계산 lapply(anscombe, var) ## $x1 ## [1] 11 ## ## $x2 ## [1] 11 ## ## $x3 ## [1] 11 ## ## $x4 ## [1] 11 ## ## $y1 ## [1] 4.127269 ## ## $y2 ## [1] 4.127629 ## ## $y3 ## [1] 4.12262 ## ## $y4 ## [1] 4.123249 X1~X4 모두 평균 9, 분산 11로 동일했으며, Y1~Y4 에서도 평균 7.5 분산 4.12로 동일했다. cor(anscombe) ## x1 x2 x3 x4 y1 y2 y3 y4 ## x1 1.0000000 1.0000000 1.0000000 -0.5000000 0.8164205 0.8162365 0.8162867 -0.3140467 ## x2 1.0000000 1.0000000 1.0000000 -0.5000000 0.8164205 0.8162365 0.8162867 -0.3140467 ## x3 1.0000000 1.0000000 1.0000000 -0.5000000 0.8164205 0.8162365 0.8162867 -0.3140467 ## x4 -0.5000000 -0.5000000 -0.5000000 1.0000000 -0.5290927 -0.7184365 -0.3446610 0.8165214 ## y1 0.8164205 0.8164205 0.8164205 -0.5290927 1.0000000 0.7500054 0.4687167 -0.4891162 ## y2 0.8162365 0.8162365 0.8162365 -0.7184365 0.7500054 1.0000000 0.5879193 -0.4780949 ## y3 0.8162867 0.8162867 0.8162867 -0.3446610 0.4687167 0.5879193 1.0000000 -0.1554718 ## y4 -0.3140467 -0.3140467 -0.3140467 0.8165214 -0.4891162 -0.4780949 -0.1554718 1.0000000 X와 매칭되는 Y의 상관계수는 각각 0.816으로 동일했으며 1차 회귀식은 모두 y = 3 + 0.5x로 동일했다. 즉 4개 그룹의 평균, 분산, 상관계수 및 회귀식이 모두 같다. 이것만 보면 같은 경향을 가진 데이터로 볼 수 있을 것이다. 하지만 이 데이터들을 산포도 표시하면 어떤 결과가 나타날까? 역시 코드의 해석은 생각하지 말고 결과값에 집중해보자. par(mfrow = c(2, 2)) # 그래프를 2x2 그리드로 배치 # 첫 번째 그래프 plot(anscombe$x1, anscombe$y1, main = &quot;Dataset I&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot;) # 두 번째 그래프 plot(anscombe$x2, anscombe$y2, main = &quot;Dataset II&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot;) # 세 번째 그래프 plot(anscombe$x3, anscombe$y3, main = &quot;Dataset III&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot;) # 네 번째 그래프 plot(anscombe$x4, anscombe$y4, main = &quot;Dataset IV&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot;) 5.1 ggplot2 소개 R에서 사용할 수 있는 많은 시각화 패키지가 존재하지만, 여기서는 Hadley Wickham이 개발한 ggplot2 패키지 위주로 설명하고자 한다. ggplot2 문법은 데이터 시각화를 위한 매우 직관적이고 일관된 방법을 제공하여 사용자가 효율적으로 그래프를 생성하고 사용자 지정할 수 있도록 도와준다. 무엇보다 ggplot2는 다른 tidyverse 패키지와의 호환성이 뛰어나며, 많은 사용자 기반으로 풍부한 문서와 예제를 제공하여 사용자들이 학습하고 사용할 수 있다. 본 챕터에서는 ggplot2을 통해 데이터셋을 지정하고, 어떤 변수를 x축 또는 y축에 매핑할 것인지, 어떤 유형의 그래프를 그릴 것인지, 색상, 크기, 선 스타일 등의 추가적인 매개 변수를 설정하는 방법을 알아보도록 하자. 그 전에 R 그래프 갤러리에 접속하면 R로 만들 수 있는 대부분의 시각화 결과물들과 그 코드를 볼 수 있다. 5.2 테이블 시각화(reactable) "],["실전-공공데이터-프로젝트.html", "챕터 6 실전 공공데이터 프로젝트 6.1 데이터 서비스 기획하기 6.2 울릉도의 버스정류장 (GIS 분석) 6.3 어떤 나라부터 도와줘야 할까? (ODA 데이터 분석) 6.4 어떤 송아지가 가장 좋을까? (API 활용하기) 6.5 공공데이터로 사주팔자 보기 (특일 분석) 6.6 승강기 데이터만 알아도 건물이 보인다 6.7 공공데이터로 창업하기 6.8 데이터 라이센스 6.9 공공데이터 개방 요청하기 6.10 공공데이터의 한계", " 챕터 6 실전 공공데이터 프로젝트 6.1 데이터 서비스 기획하기 6.1.1 문제가 무엇인가? 6.1.2 우리에게 어떤 데이터가 있는가? 6.1.3 데이터로 문제 해결하기 6.2 울릉도의 버스정류장 (GIS 분석) 6.3 어떤 나라부터 도와줘야 할까? (ODA 데이터 분석) 6.4 어떤 송아지가 가장 좋을까? (API 활용하기) 6.5 공공데이터로 사주팔자 보기 (특일 분석) 6.6 승강기 데이터만 알아도 건물이 보인다 6.7 공공데이터로 창업하기 6.8 데이터 라이센스 6.9 공공데이터 개방 요청하기 6.10 공공데이터의 한계 "],["statgarten.html", "챕터 7 Statgarten 7.1 CUI보다 GUI가 좋을 때 7.2 Statgarten 소개", " 챕터 7 Statgarten 7.1 CUI보다 GUI가 좋을 때 CUI의 가장 멋진 점은 대충 해도 엄청난 전문가처럼 보인다는 것이다(잘 모르는 사람이 봤을 때). 하지만 검은 화면에 커서만 깜빡거리는 CUI와 달리 GUI는 비전문가나 데이터 분석 경험이 적은 사람들에게 더 쉽고 직관적인 접근 방법을 제공한다. GUI 도구를 사용하면 더욱 편리하게 탐색적 데이터 분석을 수행할 수 있다. GUI 도구는 사용자와 상호작용하며 실시간으로 데이터를 분석할 수 있고 비 숙련자가 데이터를 원하는 방식으로 필터링하거나 조작하기 편리하다. 이를 통해 데이터의 다양한 측면을 보다 빠르고 쉽게 탐색하고 분석 결과를 동적으로 확인할 수 있다. 복잡한 분석 기법을 사용해야 하는 경우에도 GUI 도구는 사용자에게 쉽게 접근 가능한 메뉴, 버튼, 설정 등을 제공하여 분석 과정을 단순화하고 사용자의 부담을 줄일 수 있다. 7.2 Statgarten 소개 "],["나가는-말.html", "챕터 8 나가는 말", " 챕터 8 나가는 말 "]]
